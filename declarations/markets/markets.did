type UserStable4 = 
 record {
   age: nat;
   balances: Balance;
   bio: text;
   canister: text;
   city: text;
   comments: vec CommentStable;
   cover: text;
   createdAt: Time;
   depositAddrs: DepositAddrs;
   depositICPaddr: text;
   discord: text;
   expBalances: Balance;
   followees: vec FolloweeStable;
   followers: vec FollowerStable;
   handle: text;
   id: text;
   lastSeenAt: Time;
   likes: vec nat32;
   lockedBalances: Balance;
   markets: vec UserMarket;
   minusBalances: Balance;
   modifiedAt: Time;
   name: text;
   notifications: vec Notification;
   notificationsSeen: nat;
   number: nat32;
   picture: text;
   plusBalances: Balance;
   posts: vec nat32;
   replies: vec nat32;
   retweets: vec nat32;
   twitter: text;
   txs: vec MarketTx;
   website: text;
 };
type UserStable3 = 
 record {
   age: nat;
   balances: Balance;
   bio: text;
   canister: text;
   city: text;
   comments: vec CommentStable;
   cover: text;
   createdAt: Time;
   depositAddrs: DepositAddrs;
   depositICPaddr: text;
   discord: text;
   expBalances: Balance;
   followees: vec Followee;
   followers: vec Follower;
   handle: text;
   id: text;
   lastSeenAt: Time;
   likes: vec nat32;
   lockedBalances: Balance;
   markets: vec UserMarket;
   minusBalances: Balance;
   modifiedAt: Time;
   name: text;
   notifications: vec Notification;
   notificationsSeen: nat;
   number: nat32;
   picture: text;
   plusBalances: Balance;
   posts: vec nat32;
   replies: vec nat32;
   retweets: vec nat32;
   twitter: text;
   txs: vec MarketTx;
   website: text;
 };
type UserStable2 = 
 record {
   age: nat;
   balances: Balance;
   bio: text;
   canister: text;
   city: text;
   comments: vec CommentStable;
   cover: text;
   createdAt: Time;
   depositAddrs: DepositAddrs;
   depositICPaddr: text;
   discord: text;
   expBalances: Balance;
   followees: vec Followee;
   followers: vec Follower;
   handle: text;
   id: text;
   lastSeenAt: Time;
   likes: vec nat32;
   lockedBalances: Balance;
   markets: vec UserMarket;
   minusBalances: Balance;
   modifiedAt: Time;
   name: text;
   number: nat32;
   picture: text;
   plusBalances: Balance;
   posts: vec nat32;
   replies: vec nat32;
   retweets: vec nat32;
   twitter: text;
   txs: vec MarketTx;
   website: text;
 };
type UserStable1 = 
 record {
   age: nat;
   balances: Balance;
   bio: text;
   canister: text;
   city: text;
   comments: vec CommentStable;
   cover: text;
   createdAt: Time;
   depositAddrs: DepositAddrs;
   depositICPaddr: text;
   discord: text;
   expBalances: Balance;
   followees: vec Followee;
   followers: vec Follower;
   handle: text;
   id: text;
   lastSeenAt: Time;
   likes: vec nat32;
   markets: vec UserMarket;
   minusBalances: Balance;
   modifiedAt: Time;
   name: text;
   number: nat32;
   picture: text;
   plusBalances: Balance;
   posts: vec nat32;
   replies: vec nat32;
   retweets: vec nat32;
   twitter: text;
   txs: vec MarketTx;
   website: text;
 };
type UserStable0 = 
 record {
   age: nat;
   balances: Balance;
   bio: text;
   canister: text;
   city: text;
   comments: vec CommentStable;
   cover: text;
   createdAt: Time;
   depositAddrs: DepositAddrs;
   depositICPaddr: text;
   discord: text;
   expBalances: Balance;
   followees: vec Followee;
   followers: vec Follower;
   handle: text;
   id: text;
   lastSeenAt: Time;
   likes: vec nat32;
   markets: vec UserMarket;
   minusBalances: Balance;
   modifiedAt: Time;
   name: text;
   number: nat32;
   picture: text;
   plusBalances: Balance;
   posts: vec nat32;
   replies: vec nat32;
   retweets: vec nat32;
   twitter: text;
   txs: vec MarketTx;
   website: text;
 };
type UserStable = 
 variant {
   v0: UserStable0;
   v1: UserStable1;
   v2: UserStable2;
   v3: UserStable3;
   v4: UserStable4;
 };
type UserMarket = 
 record {
   author: bool;
   balances: vec nat64;
   brierScores: vec BrierScore;
   collateralType: CollateralType;
   createdAt: Time;
   labels: vec text;
   marketId: nat32;
   modifiedAt: Time;
   redeemed: bool;
   shares: nat64;
   spent: nat64;
   title: text;
 };
type UserInitData = 
 record {
   age: nat;
   bio: text;
   canister: text;
   city: text;
   cover: text;
   discord: text;
   handle: text;
   id: text;
   name: text;
   number: nat32;
   picture: text;
   twitter: text;
   website: text;
 };
type UserData = 
 record {
   handle: text;
   name: text;
   picture: text;
   "principal": text;
 };
type Time = int;
type ThreadStable = 
 record {
   ancestors: vec FullPost;
   main: FullPost;
   replies: vec FullPost;
 };
type Subaccount = blob;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: func () -> ();
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type State = 
 variant {
   cancelled;
   closed;
   matched;
   open;
   redeemed: nat;
   resolved: nat;
 };
type StableState1 = 
 record {
   assets: vec record {
                 text;
                 Asset;
               };
   bets: vec record {
               nat32;
               SimpleMarketStable;
             };
   chunks: vec record {
                 nat;
                 Chunk;
               };
   feed: vec nat32;
   handles: vec record {
                  text;
                  text;
                };
   hashtags: vec record {
                   text;
                   vec nat32;
                 };
   images: vec record {
                 nat32;
                 text;
               };
   markets: vec record {
                  nat32;
                  MarketStable;
                };
   payments: vec Payment;
   posts: vec record {
                nat32;
                PostStable;
              };
   postsv: vec record {
                 nat32;
                 StablePost;
               };
   users: vec record {
                text;
                UserStable;
              };
 };
type StableState0 = 
 record {
   bets: vec record {
               nat32;
               SimpleMarketStable;
             };
   feed: vec nat32;
   handles: vec record {
                  text;
                  text;
                };
   images: vec record {
                 nat32;
                 text;
               };
   markets: vec record {
                  nat32;
                  MarketStable;
                };
   payments: vec Payment;
   posts: vec record {
                nat32;
                PostStable;
              };
   users: vec record {
                text;
                UserStable;
              };
 };
type StableState = 
 variant {
   v0: StableState0;
   v1: StableState1;
 };
type StablePost = 
 variant {
   v0: PostStable0;
   v1: PostStable1;
   v2: PostStable2;
   v3: PostStable3;
 };
type SimpleMarketStable = 
 record {
   amount: nat64;
   author: opt UserData;
   authorAmount: nat64;
   authorChoice: nat;
   authorResolution: nat;
   collateralType: CollateralType;
   createdAt: Time;
   description: text;
   id: nat32;
   matcher: opt UserData;
   matcherAmount: nat64;
   matcherChoice: nat;
   matcherResolution: nat;
   modifiedAt: Time;
   outcomes: vec text;
   state: State;
 };
type Retweet = 
 record {
   author: UserData;
   content: text;
   createdAt: Time;
   id: nat32;
   parent: opt ParentData;
 };
type Result_9 = 
 variant {
   err: Error;
   ok: vec nat32;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: nat64;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: ThreadStable;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: text;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: record {
         UserStable;
         vec FullPost;
       };
 };
type Result_4 = 
 variant {
   err: Error;
   ok: vec UserStable;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: vec Notification;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: UserStable;
 };
type Result_15 = 
 variant {
   err: Error;
   ok: CommentStable;
 };
type Result_14 = 
 variant {
   err: Error;
   ok: record {
         UserStable;
         vec PostStable;
       };
 };
type Result_13 = 
 variant {
   err: Error;
   ok: SimpleMarketStable;
 };
type Result_12 = 
 variant {
   err: Error;
   ok: vec StablePost;
 };
type Result_11 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             vec nat32;
           };
 };
type Result_10 = 
 variant {
   err: Error;
   ok: StablePost;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: nat32;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type PostStable3 = 
 record {
   author: UserData;
   content: text;
   createdAt: Time;
   deleted: bool;
   hashtags: vec text;
   id: nat32;
   image: opt text;
   images: vec text;
   isRetweet: opt UserData;
   likes: vec Like;
   market: nat32;
   mentions: vec text;
   parent: opt ParentData;
   pdfs: vec text;
   replies: vec nat32;
   retweet: opt Retweet;
   retweeters: vec UserData;
   simpleMarket: nat32;
   verified: bool;
 };
type PostStable2 = 
 record {
   author: UserData;
   content: text;
   createdAt: Time;
   deleted: bool;
   hashtags: vec text;
   id: nat32;
   image: opt text;
   images: vec text;
   isRetweet: opt UserData;
   likes: vec Like;
   market: nat32;
   mentions: vec text;
   parent: opt ParentData;
   replies: vec nat32;
   retweet: opt Retweet;
   retweeters: vec UserData;
   simpleMarket: nat32;
 };
type PostStable1 = 
 record {
   author: UserData;
   content: text;
   createdAt: Time;
   deleted: bool;
   id: nat32;
   image: opt text;
   images: vec text;
   isRetweet: opt UserData;
   likes: vec Like;
   market: nat32;
   parent: opt ParentData;
   replies: vec nat32;
   retweet: opt Retweet;
   retweeters: vec UserData;
   simpleMarket: nat32;
 };
type PostStable0 = 
 record {
   author: UserData;
   content: text;
   createdAt: Time;
   deleted: bool;
   id: nat32;
   image: opt text;
   isRetweet: opt UserData;
   likes: vec Like;
   market: nat32;
   parent: opt ParentData;
   replies: vec nat32;
   retweet: opt Retweet;
   retweeters: vec UserData;
   simpleMarket: nat32;
 };
type PostStable = 
 record {
   author: UserData;
   content: text;
   createdAt: Time;
   deleted: bool;
   id: nat32;
   image: opt text;
   isRetweet: opt UserData;
   likes: vec Like;
   market: nat32;
   parent: opt ParentData;
   replies: vec nat32;
   retweet: opt Retweet;
   retweeters: vec UserData;
   simpleMarket: nat32;
 };
type PostInitData = 
 record {
   author: UserData;
   content: text;
   hashtags: vec text;
   id: nat32;
   image: opt text;
   images: vec text;
   isRetweet: opt UserData;
   market: nat32;
   mentions: vec text;
   parent: opt ParentData;
   pdfs: vec text;
   retweet: opt Retweet;
   simpleMarket: nat32;
   verified: bool;
 };
type Payment = 
 record {
   amount: nat64;
   collateralType: CollateralType;
   from: text;
   processed: bool;
   to: text;
 };
type ParentData__1 = 
 record {
   author: UserData;
   id: nat32;
 };
type ParentData = 
 record {
   author: UserData;
   id: nat32;
 };
type NotificationType0 = variant {reply: NotificationPost;};
type NotificationPost = 
 record {
   author: UserData;
   content: text;
   createdAt: Time;
   id: nat32;
   image: opt text;
   images: vec text;
   isRetweet: opt UserData;
   market: nat32;
   parent: opt ParentData__1;
   simpleMarket: nat32;
 };
type Notification = variant {v0: NotificationType0;};
type MarketTx = 
 record {
   collateralType: CollateralType;
   createdAt: Time;
   dest: opt nat;
   fee: nat64;
   id: nat32;
   marketId: nat32;
   price: nat64;
   recv: nat64;
   sent: nat64;
   src: opt nat;
 };
type MarketState = 
 variant {
   any;
   approved;
   closed;
   invalid;
   open;
   pending;
   resolved: nat;
 };
type MarketStable = 
 record {
   author: text;
   bettors: vec Bettor;
   category: MarketCategory;
   collateralType: CollateralType;
   comments: vec CommentStable;
   createdAt: Time;
   description: text;
   endDate: Time;
   forecasts: vec Forecast;
   histPrices: vec HistPoint;
   id: nat32;
   imageUrl: text;
   images: vec text;
   k: nat;
   labels: vec text;
   liquidity: nat;
   modifiedAt: Time;
   probabilities: vec nat;
   providers: vec text;
   reserves: vec nat;
   startDate: Time;
   state: MarketState;
   title: text;
   totalShares: nat;
   volume: nat;
 };
type MarketInitData = 
 record {
   author: text;
   category: MarketCategory;
   collateralType: CollateralType;
   description: text;
   endDate: Time;
   id: nat32;
   imageUrl: text;
   images: vec text;
   labels: vec text;
   liquidity: nat;
   probabilities: vec nat;
   startDate: Time;
   title: text;
 };
type MarketCategory = 
 variant {
   any;
   business;
   crypto;
   dfinity;
   entertainment;
   financial;
   politics;
   science;
   seers;
   self;
   sports;
 };
type Like = 
 record {
   author: UserData;
   createdAt: Time;
 };
type InitData = 
 record {
   author: opt UserData;
   authorAmount: nat64;
   authorChoice: nat;
   collateralType: CollateralType;
   description: text;
   id: nat32;
   outcomes: vec text;
 };
type ICP = record {e8s: nat64;};
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HistPoint = 
 record {
   createdAt: Time;
   liquidity: nat;
   probabilities: vec nat;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type FullPost = 
 record {
   StablePost;
   opt MarketStable;
   opt SimpleMarketStable;
 };
type Forecast = vec float64;
type FollowerStable = variant {v0: Follower0;};
type Follower0 = 
 record {
   createdAt: Time;
   userdata: UserData;
 };
type Follower = 
 record {
   createdAt: Time;
   user: text;
 };
type FolloweeStable = variant {v0: Followee0;};
type Followee0 = 
 record {
   createdAt: Time;
   userdata: UserData;
 };
type Followee = 
 record {
   createdAt: Time;
   user: text;
 };
type Error = 
 variant {
   alreadyLiked;
   alreadyRetweeted;
   authorDoesNotExist;
   authorOutcomeMissing;
   betDoesNotExist;
   callerIsAnon;
   callerIsNotAuthor;
   canNotDelete;
   cannotBeRedeemed;
   cantGetBalance;
   commentIsEmpty;
   descriptionMissing;
   endDateOld;
   endDateOlderThanStartDate;
   failedTransfer: text;
   handleAlreadyTaken;
   imageMissing;
   imageNotFound;
   insufficientBalance;
   invalidIdentifier;
   lowerThanMinAmount;
   marketMissing;
   marketNotFound;
   marketNotOpen;
   missingDescription;
   missingICPaddress;
   newtonFailed;
   notEnoughAmount;
   notEnoughBalance;
   notEnoughBetAmount;
   notEnoughLiquidity;
   notLoggedIn;
   nothingToRedeem;
   onlyAuthorCanDelete;
   onlyAuthorCanEdit;
   optionsMissing;
   outcomeMissing;
   parentDoesNotExist;
   postDoesNotExist;
   postIsEmpty;
   profileNotCreated;
   startDateOld;
   titleMissing;
   userAlreadyExist;
   userDoesNotExist;
   wrongNumberOfOutcomes;
 };
type DepositAddrs = 
 record {
   btc: text;
   cycles: text;
   icp: Subaccount;
 };
type CommentStable = 
 record {
   author: UserData;
   content: text;
   createdAt: Time;
   id: nat32;
   likes: vec Like;
   modifiedAt: Time;
 };
type CollateralType = 
 variant {
   btc;
   cycles;
   icp;
   seers;
 };
type Chunk = 
 record {
   batch_name: text;
   content: blob;
 };
type BrierScore = 
 record {
   createdAt: Time;
   score: float64;
 };
type Bettor = 
 record {
   id: text;
   outcome: nat;
   spent: nat64;
 };
type Balance = 
 record {
   btc: nat64;
   cycles: nat64;
   icp: nat64;
   seers: nat64;
 };
type AssetEncoding = 
 record {
   certified: bool;
   content_chunks: vec blob;
   modified: int;
   total_length: nat;
 };
type Asset = 
 record {
   content_type: text;
   encoding: AssetEncoding;
 };
type Actor = 
 service {
   accountBalance: (text) -> (opt ICP);
   addCommentToMarket: (nat32, text) -> (Result_15);
   backupBalances: () -> (vec record {
                                text;
                                text;
                                text;
                                text;
                              }) query;
   backupBalances2: () -> (vec record {
                                 text;
                                 text;
                                 nat32;
                                 text;
                                 text;
                               }) query;
   backupIds: () -> (vec text) query;
   backupPosts: () -> (vec StablePost) query;
   backupPostsRange: (nat32, nat32) -> (vec StablePost) query;
   buyOutcome: (nat32, nat64, nat, bool) -> (Result_8);
   callerAccount: () -> (AccountIdentifier);
   canisterAccount: () -> (text) query;
   canisterBalance: () -> (ICP);
   claimReward: () -> (Result_8);
   commit_batch:
    (record {
       batch_name: text;
       chunk_ids: vec nat;
       content_type: text;
     }) -> ();
   createAnonUser: () -> (Result_14);
   createBet: (InitData) -> (Result_13);
   create_chunk: (Chunk) -> (record {chunk_id: nat;});
   deleteAllMarkets: () -> ();
   deleteAllUsers: () -> (bool);
   deleteBet: (nat32) -> (Result);
   deleteMarket: (nat32) -> ();
   editPost: (PostInitData, opt MarketInitData) -> (Result);
   editUser: (UserInitData) -> (Result_2);
   findUser: (text) -> (vec UserStable) query;
   fixAvatars: () -> ();
   fixUser: () -> ();
   followUser: (text) -> (Result);
   getFeed: () ->
    (vec record {
           StablePost;
           opt MarketStable;
           opt SimpleMarketStable;
         }) query;
   getFullPostsByTag: (text) -> (Result_12) query;
   getHandles: () -> (vec record {
                            text;
                            text;
                          }) query;
   getHashTags: () -> (Result_11) query;
   getPayments: () -> (vec Payment) query;
   getPaymentsError: () -> (text) query;
   getPost: (nat32) -> (Result_10) query;
   getPostsByTag: (text) -> (Result_9) query;
   getRevenue: () -> (Result_8) query;
   getThread: (nat32) -> (Result_7) query;
   getUserAccount: (text) -> (Result_6);
   getUserFromPrincipal: (text) -> (Result_5) query;
   getUserStable: (text) -> (opt UserStable) query;
   getUserWithPosts: (text) -> (Result_5) query;
   getUsers: () -> (vec record {
                          text;
                          UserStable;
                        }) query;
   getUsersFromPrincipals: (vec text) -> (Result_4) query;
   haveNotifications: () -> (bool) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_streaming_callback: (StreamingCallbackToken) ->
    (StreamingCallbackHttpResponse) query;
   makeHashTags: () -> (Result);
   matchBet: (nat32) -> (Result);
   otherAccount: () -> (text) query;
   readAllBets: () -> (vec SimpleMarketStable) query;
   readAllMarkets: (MarketCategory, MarketState) -> (vec MarketStable) query;
   readAllUsers: () -> (vec UserStable) query;
   readFIFAMarkets: () -> (vec MarketStable) query;
   readMarket: (nat32) -> (opt MarketStable) query;
   readMarketsState: () ->
    (vec record {
           nat32;
           text;
           MarketState;
           vec nat;
         }) query;
   readNextPostId: () -> (nat32) query;
   readNotifications: () -> (Result_3) query;
   readStableState: () -> (StableState) query;
   readState: () -> (StableState) query;
   readTotalICP: () -> (nat64) query;
   readUserByHandle: (text) -> (opt UserStable) query;
   readUserByPrincipal: (text) -> (opt UserStable) query;
   readUserHandle: (text) -> (opt text) query;
   readUserPrincipal: (text) -> (opt text) query;
   readUsersKarma: () -> (vec record {
                                text;
                                text;
                                text;
                                nat;
                              }) query;
   readUsersKarmaClaim: () -> (vec record {
                                     text;
                                     text;
                                     text;
                                     nat;
                                     text;
                                   }) query;
   redeemBet: (nat32) -> (Result);
   refreshUser: () -> (Result_2);
   resetPlusAndMinusBalances: (text) -> (Result);
   resolveBet: (nat32, nat) -> (Result);
   resolveMarket: (nat32, nat) -> (Result);
   setAvatar: (text, text) -> (Result);
   setCover: (text, text) -> (Result);
   setHandle: (text, text) -> (Result);
   setIcpBalance: (text, nat64) -> (Result);
   setIcpPlusBalance: (text, nat64) -> (Result);
   setMarketEnd: (nat32, Time) -> (bool);
   setMarketImage: (nat32, text) -> (bool);
   setMarketPost: (nat32, nat32) -> (Result);
   setMarketState: (nat32, MarketState) -> (bool);
   setMarketTitle: (nat32, text) -> (bool);
   setPrincipal: (text, text) -> (Result);
   setRewards: () -> ();
   setSeersBalance: (text, nat64) -> (Result);
   setTwitter: (text, text) -> (Result);
   setTwitterWithContent: (text, text, text, text) -> (Result);
   setUpdating: (bool) -> () oneway;
   setUsersRewards: () -> () query;
   submitDelete: (nat32) -> (Result);
   submitLike: (nat32) -> (Result);
   submitPost: (PostInitData, opt MarketInitData, opt InitData) -> (Result);
   submitRetweet: (nat32) -> (Result);
   submitTextPost: (PostInitData, text) -> (Result);
   submitTextPost2: (PostInitData, text) -> (Result_1);
   transferToCanister: () -> (text);
   transferToHandle: (text, nat64) -> (Result);
   transferToIdentifier: (text, nat64) -> (Result);
   unfollowUser: (text) -> (Result);
   unlockFunds: (text, CollateralType, nat64) -> (Result);
   updateNotifications: () -> (Result);
 };
type AccountIdentifier = blob;
service : () -> Actor
