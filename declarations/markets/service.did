type AccountIdentifier = vec nat8;
type Actor = service {
  accountBalance : (text) -> (opt ICP);
  addCommentToMarket : (nat32, text) -> (Result_15);
  backupBalances : () -> (vec record { text; text; text; text }) query;
  backupBalances2 : () -> (vec record { text; text; nat32; text; text }) query;
  backupIds : () -> (vec text) query;
  backupPosts : () -> (vec StablePost) query;
  backupPostsRange : (nat32, nat32) -> (vec StablePost) query;
  buyOutcome : (nat32, nat64, nat, bool) -> (Result_8);
  callerAccount : () -> (AccountIdentifier);
  canisterAccount : () -> (text) query;
  canisterBalance : () -> (ICP);
  claimReward : () -> (Result_8);
  commit_batch : (
      record { batch_name : text; content_type : text; chunk_ids : vec nat },
    ) -> ();
  createAnonUser : () -> (Result_14);
  createBet : (InitData) -> (Result_13);
  create_chunk : (Chunk) -> (record { chunk_id : nat });
  deleteAllMarkets : () -> ();
  deleteAllUsers : () -> (bool);
  deleteBet : (nat32) -> (Result);
  deleteMarket : (nat32) -> ();
  editPost : (PostInitData, opt MarketInitData) -> (Result);
  editUser : (UserInitData) -> (Result_2);
  findUser : (text) -> (vec UserStable) query;
  fixAvatars : () -> ();
  fixUser : () -> ();
  followUser : (text) -> (Result);
  getFeed : () -> (
      vec record { StablePost; opt MarketStable; opt SimpleMarketStable },
    ) query;
  getFullPostsByTag : (text) -> (Result_12) query;
  getHandles : () -> (vec record { text; text }) query;
  getHashTags : () -> (Result_11) query;
  getPayments : () -> (vec Payment) query;
  getPaymentsError : () -> (text) query;
  getPost : (nat32) -> (Result_10) query;
  getPostsByTag : (text) -> (Result_9) query;
  getRevenue : () -> (Result_8) query;
  getThread : (nat32) -> (Result_7) query;
  getUserAccount : (text) -> (Result_6);
  getUserFromPrincipal : (text) -> (Result_5) query;
  getUserStable : (text) -> (opt UserStable) query;
  getUserWithPosts : (text) -> (Result_5) query;
  getUsers : () -> (vec record { text; UserStable }) query;
  getUsersFromPrincipals : (vec text) -> (Result_4) query;
  haveNotifications : () -> (bool) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback : (StreamingCallbackToken) -> (
      StreamingCallbackHttpResponse,
    ) query;
  makeHashTags : () -> (Result);
  matchBet : (nat32) -> (Result);
  otherAccount : () -> (text) query;
  readAllBets : () -> (vec SimpleMarketStable) query;
  readAllMarkets : (MarketCategory, MarketState) -> (vec MarketStable) query;
  readAllUsers : () -> (vec UserStable) query;
  readFIFAMarkets : () -> (vec MarketStable) query;
  readMarket : (nat32) -> (opt MarketStable) query;
  readMarketsState : () -> (
      vec record { nat32; text; MarketState; vec nat },
    ) query;
  readNextPostId : () -> (nat32) query;
  readNotifications : () -> (Result_3) query;
  readStableState : () -> (StableState) query;
  readState : () -> (StableState) query;
  readTotalICP : () -> (nat64) query;
  readUserByHandle : (text) -> (opt UserStable) query;
  readUserByPrincipal : (text) -> (opt UserStable) query;
  readUserHandle : (text) -> (opt text) query;
  readUserPrincipal : (text) -> (opt text) query;
  readUsersKarma : () -> (vec record { text; text; text; nat }) query;
  readUsersKarmaClaim : () -> (
      vec record { text; text; text; nat; text },
    ) query;
  redeemBet : (nat32) -> (Result);
  refreshUser : () -> (Result_2);
  resetPlusAndMinusBalances : (text) -> (Result);
  resolveBet : (nat32, nat) -> (Result);
  resolveMarket : (nat32, nat) -> (Result);
  setAvatar : (text, text) -> (Result);
  setCover : (text, text) -> (Result);
  setHandle : (text, text) -> (Result);
  setIcpBalance : (text, nat64) -> (Result);
  setIcpPlusBalance : (text, nat64) -> (Result);
  setMarketEnd : (nat32, Time) -> (bool);
  setMarketImage : (nat32, text) -> (bool);
  setMarketPost : (nat32, nat32) -> (Result);
  setMarketState : (nat32, MarketState) -> (bool);
  setMarketTitle : (nat32, text) -> (bool);
  setPrincipal : (text, text) -> (Result);
  setRewards : () -> ();
  setSeersBalance : (text, nat64) -> (Result);
  setTwitter : (text, text) -> (Result);
  setTwitterWithContent : (text, text, text, text) -> (Result);
  setUpdating : (bool) -> () oneway;
  setUsersRewards : () -> () query;
  submitDelete : (nat32) -> (Result);
  submitLike : (nat32) -> (Result);
  submitPost : (PostInitData, opt MarketInitData, opt InitData) -> (Result);
  submitRetweet : (nat32) -> (Result);
  submitTextPost : (PostInitData, text) -> (Result);
  submitTextPost2 : (PostInitData, text) -> (Result_1);
  transferToCanister : () -> (text);
  transferToHandle : (text, nat64) -> (Result);
  transferToIdentifier : (text, nat64) -> (Result);
  unfollowUser : (text) -> (Result);
  unlockFunds : (text, CollateralType, nat64) -> (Result);
  updateNotifications : () -> (Result);
};
type Asset = record { encoding : AssetEncoding; content_type : text };
type AssetEncoding = record {
  modified : int;
  certified : bool;
  content_chunks : vec vec nat8;
  total_length : nat;
};
type Balance = record {
  btc : nat64;
  icp : nat64;
  seers : nat64;
  cycles : nat64;
};
type Bettor = record { id : text; spent : nat64; outcome : nat };
type BrierScore = record { createdAt : Time; score : float64 };
type Chunk = record { content : vec nat8; batch_name : text };
type CollateralType = variant { btc; icp; seers; cycles };
type CommentStable = record {
  id : nat32;
  content : text;
  modifiedAt : Time;
  createdAt : Time;
  author : UserData;
  likes : vec Like;
};
type DepositAddrs = record { btc : text; icp : Subaccount; cycles : text };
type Error = variant {
  insufficientBalance;
  callerIsAnon;
  missingICPaddress;
  userAlreadyExist;
  nothingToRedeem;
  notLoggedIn;
  imageMissing;
  profileNotCreated;
  invalidIdentifier;
  parentDoesNotExist;
  notEnoughBalance;
  postIsEmpty;
  optionsMissing;
  betDoesNotExist;
  failedTransfer : text;
  descriptionMissing;
  marketNotFound;
  titleMissing;
  handleAlreadyTaken;
  canNotDelete;
  imageNotFound;
  alreadyLiked;
  lowerThanMinAmount;
  onlyAuthorCanDelete;
  missingDescription;
  marketMissing;
  startDateOld;
  marketNotOpen;
  callerIsNotAuthor;
  onlyAuthorCanEdit;
  postDoesNotExist;
  alreadyRetweeted;
  commentIsEmpty;
  userDoesNotExist;
  outcomeMissing;
  authorOutcomeMissing;
  endDateOld;
  cantGetBalance;
  notEnoughBetAmount;
  newtonFailed;
  notEnoughAmount;
  endDateOlderThanStartDate;
  wrongNumberOfOutcomes;
  authorDoesNotExist;
  cannotBeRedeemed;
  notEnoughLiquidity;
};
type Followee = record { createdAt : Time; user : text };
type Followee0 = record { userdata : UserData; createdAt : Time };
type FolloweeStable = variant { v0 : Followee0 };
type Follower = record { createdAt : Time; user : text };
type Follower0 = record { userdata : UserData; createdAt : Time };
type FollowerStable = variant { v0 : Follower0 };
type Forecast = vec float64;
type FullPost = record { StablePost; opt MarketStable; opt SimpleMarketStable };
type HeaderField = record { text; text };
type HistPoint = record {
  probabilities : vec nat;
  createdAt : Time;
  liquidity : nat;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec HeaderField;
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec HeaderField;
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type ICP = record { e8s : nat64 };
type InitData = record {
  id : nat32;
  collateralType : CollateralType;
  description : text;
  author : opt UserData;
  outcomes : vec text;
  authorChoice : nat;
  authorAmount : nat64;
};
type Like = record { createdAt : Time; author : UserData };
type MarketCategory = variant {
  any;
  entertainment;
  self;
  seers;
  crypto;
  business;
  financial;
  sports;
  dfinity;
  science;
  politics;
};
type MarketInitData = record {
  id : nat32;
  title : text;
  probabilities : vec nat;
  endDate : Time;
  labels : vec text;
  liquidity : nat;
  collateralType : CollateralType;
  description : text;
  author : text;
  imageUrl : text;
  category : MarketCategory;
  startDate : Time;
  images : vec text;
};
type MarketStable = record {
  k : nat;
  id : nat32;
  forecasts : vec Forecast;
  title : text;
  histPrices : vec HistPoint;
  probabilities : vec nat;
  endDate : Time;
  modifiedAt : Time;
  labels : vec text;
  createdAt : Time;
  liquidity : nat;
  reserves : vec nat;
  collateralType : CollateralType;
  description : text;
  volume : nat;
  bettors : vec Bettor;
  author : text;
  state : MarketState;
  imageUrl : text;
  category : MarketCategory;
  providers : vec text;
  comments : vec CommentStable;
  totalShares : nat;
  startDate : Time;
  images : vec text;
};
type MarketState = variant {
  any;
  resolved : nat;
  closed;
  pending;
  invalid;
  open;
  approved;
};
type MarketTx = record {
  id : nat32;
  fee : nat64;
  src : opt nat;
  dest : opt nat;
  createdAt : Time;
  recv : nat64;
  sent : nat64;
  collateralType : CollateralType;
  marketId : nat32;
  price : nat64;
};
type Notification = variant { v0 : NotificationType0 };
type NotificationPost = record {
  id : nat32;
  isRetweet : opt UserData;
  simpleMarket : nat32;
  content : text;
  createdAt : Time;
  author : UserData;
  market : nat32;
  image : opt text;
  parent : opt ParentData__1;
  images : vec text;
};
type NotificationType0 = variant { reply : NotificationPost };
type ParentData = record { id : nat32; author : UserData };
type ParentData__1 = record { id : nat32; author : UserData };
type Payment = record {
  to : text;
  from : text;
  collateralType : CollateralType;
  processed : bool;
  amount : nat64;
};
type PostInitData = record {
  id : nat32;
  retweet : opt Retweet;
  isRetweet : opt UserData;
  simpleMarket : nat32;
  verified : bool;
  content : text;
  hashtags : vec text;
  pdfs : vec text;
  author : UserData;
  market : nat32;
  image : opt text;
  mentions : vec text;
  parent : opt ParentData;
  images : vec text;
};
type PostStable = record {
  id : nat32;
  retweet : opt Retweet;
  isRetweet : opt UserData;
  simpleMarket : nat32;
  deleted : bool;
  content : text;
  createdAt : Time;
  author : UserData;
  likes : vec Like;
  replies : vec nat32;
  market : nat32;
  image : opt text;
  parent : opt ParentData;
  retweeters : vec UserData;
};
type PostStable0 = record {
  id : nat32;
  retweet : opt Retweet;
  isRetweet : opt UserData;
  simpleMarket : nat32;
  deleted : bool;
  content : text;
  createdAt : Time;
  author : UserData;
  likes : vec Like;
  replies : vec nat32;
  market : nat32;
  image : opt text;
  parent : opt ParentData;
  retweeters : vec UserData;
};
type PostStable1 = record {
  id : nat32;
  retweet : opt Retweet;
  isRetweet : opt UserData;
  simpleMarket : nat32;
  deleted : bool;
  content : text;
  createdAt : Time;
  author : UserData;
  likes : vec Like;
  replies : vec nat32;
  market : nat32;
  image : opt text;
  parent : opt ParentData;
  retweeters : vec UserData;
  images : vec text;
};
type PostStable2 = record {
  id : nat32;
  retweet : opt Retweet;
  isRetweet : opt UserData;
  simpleMarket : nat32;
  deleted : bool;
  content : text;
  hashtags : vec text;
  createdAt : Time;
  author : UserData;
  likes : vec Like;
  replies : vec nat32;
  market : nat32;
  image : opt text;
  mentions : vec text;
  parent : opt ParentData;
  retweeters : vec UserData;
  images : vec text;
};
type PostStable3 = record {
  id : nat32;
  retweet : opt Retweet;
  isRetweet : opt UserData;
  simpleMarket : nat32;
  verified : bool;
  deleted : bool;
  content : text;
  hashtags : vec text;
  createdAt : Time;
  pdfs : vec text;
  author : UserData;
  likes : vec Like;
  replies : vec nat32;
  market : nat32;
  image : opt text;
  mentions : vec text;
  parent : opt ParentData;
  retweeters : vec UserData;
  images : vec text;
};
type Result = variant { ok; err : Error };
type Result_1 = variant { ok : nat32; err : Error };
type Result_10 = variant { ok : StablePost; err : Error };
type Result_11 = variant { ok : vec record { text; vec nat32 }; err : Error };
type Result_12 = variant { ok : vec StablePost; err : Error };
type Result_13 = variant { ok : SimpleMarketStable; err : Error };
type Result_14 = variant {
  ok : record { UserStable; vec PostStable };
  err : Error;
};
type Result_15 = variant { ok : CommentStable; err : Error };
type Result_2 = variant { ok : UserStable; err : Error };
type Result_3 = variant { ok : vec Notification; err : Error };
type Result_4 = variant { ok : vec UserStable; err : Error };
type Result_5 = variant {
  ok : record { UserStable; vec FullPost };
  err : Error;
};
type Result_6 = variant { ok : text; err : Error };
type Result_7 = variant { ok : ThreadStable; err : Error };
type Result_8 = variant { ok : nat64; err : Error };
type Result_9 = variant { ok : vec nat32; err : Error };
type Retweet = record {
  id : nat32;
  content : text;
  createdAt : Time;
  author : UserData;
  parent : opt ParentData;
};
type SimpleMarketStable = record {
  id : nat32;
  matcherResolution : nat;
  matcherChoice : nat;
  matcherAmount : nat64;
  modifiedAt : Time;
  createdAt : Time;
  collateralType : CollateralType;
  description : text;
  authorResolution : nat;
  author : opt UserData;
  outcomes : vec text;
  state : State;
  matcher : opt UserData;
  amount : nat64;
  authorChoice : nat;
  authorAmount : nat64;
};
type StablePost = variant {
  v0 : PostStable0;
  v1 : PostStable1;
  v2 : PostStable2;
  v3 : PostStable3;
};
type StableState = variant { v0 : StableState0; v1 : StableState1 };
type StableState0 = record {
  payments : vec Payment;
  bets : vec record { nat32; SimpleMarketStable };
  feed : vec nat32;
  handles : vec record { text; text };
  markets : vec record { nat32; MarketStable };
  users : vec record { text; UserStable };
  posts : vec record { nat32; PostStable };
  images : vec record { nat32; text };
};
type StableState1 = record {
  hashtags : vec record { text; vec nat32 };
  payments : vec Payment;
  bets : vec record { nat32; SimpleMarketStable };
  feed : vec nat32;
  handles : vec record { text; text };
  assets : vec record { text; Asset };
  markets : vec record { nat32; MarketStable };
  users : vec record { text; UserStable };
  chunks : vec record { nat; Chunk };
  posts : vec record { nat32; PostStable };
  postsv : vec record { nat32; StablePost };
  images : vec record { nat32; text };
};
type State = variant {
  resolved : nat;
  closed;
  cancelled;
  redeemed : nat;
  open;
  matched;
};
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : vec nat8;
};
type StreamingCallbackToken = record {
  key : text;
  index : nat;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> ();
  };
};
type Subaccount = vec nat8;
type ThreadStable = record {
  main : FullPost;
  ancestors : vec FullPost;
  replies : vec FullPost;
};
type Time = int;
type UserData = record {
  "principal" : text;
  name : text;
  picture : text;
  handle : text;
};
type UserInitData = record {
  id : text;
  age : nat;
  bio : text;
  twitter : text;
  city : text;
  name : text;
  cover : text;
  website : text;
  picture : text;
  canister : text;
  number : nat32;
  discord : text;
  handle : text;
};
type UserMarket = record {
  brierScores : vec BrierScore;
  title : text;
  shares : nat64;
  modifiedAt : Time;
  redeemed : bool;
  labels : vec text;
  createdAt : Time;
  collateralType : CollateralType;
  author : bool;
  spent : nat64;
  marketId : nat32;
  balances : vec nat64;
};
type UserStable = variant {
  v0 : UserStable0;
  v1 : UserStable1;
  v2 : UserStable2;
  v3 : UserStable3;
  v4 : UserStable4;
};
type UserStable0 = record {
  id : text;
  age : nat;
  bio : text;
  txs : vec MarketTx;
  retweets : vec nat32;
  expBalances : Balance;
  twitter : text;
  lastSeenAt : Time;
  modifiedAt : Time;
  city : text;
  name : text;
  createdAt : Time;
  cover : text;
  markets : vec UserMarket;
  website : text;
  likes : vec nat32;
  picture : text;
  minusBalances : Balance;
  plusBalances : Balance;
  canister : text;
  number : nat32;
  replies : vec nat32;
  discord : text;
  handle : text;
  comments : vec CommentStable;
  posts : vec nat32;
  followees : vec Followee;
  followers : vec Follower;
  depositAddrs : DepositAddrs;
  balances : Balance;
  depositICPaddr : text;
};
type UserStable1 = record {
  id : text;
  age : nat;
  bio : text;
  txs : vec MarketTx;
  retweets : vec nat32;
  expBalances : Balance;
  twitter : text;
  lastSeenAt : Time;
  modifiedAt : Time;
  city : text;
  name : text;
  createdAt : Time;
  cover : text;
  markets : vec UserMarket;
  website : text;
  likes : vec nat32;
  picture : text;
  minusBalances : Balance;
  plusBalances : Balance;
  canister : text;
  number : nat32;
  replies : vec nat32;
  discord : text;
  handle : text;
  comments : vec CommentStable;
  posts : vec nat32;
  followees : vec Followee;
  followers : vec Follower;
  depositAddrs : DepositAddrs;
  balances : Balance;
  depositICPaddr : text;
};
type UserStable2 = record {
  id : text;
  age : nat;
  bio : text;
  txs : vec MarketTx;
  retweets : vec nat32;
  expBalances : Balance;
  twitter : text;
  lastSeenAt : Time;
  modifiedAt : Time;
  city : text;
  name : text;
  createdAt : Time;
  cover : text;
  markets : vec UserMarket;
  website : text;
  likes : vec nat32;
  picture : text;
  minusBalances : Balance;
  plusBalances : Balance;
  canister : text;
  number : nat32;
  replies : vec nat32;
  discord : text;
  handle : text;
  lockedBalances : Balance;
  comments : vec CommentStable;
  posts : vec nat32;
  followees : vec Followee;
  followers : vec Follower;
  depositAddrs : DepositAddrs;
  balances : Balance;
  depositICPaddr : text;
};
type UserStable3 = record {
  id : text;
  age : nat;
  bio : text;
  txs : vec MarketTx;
  retweets : vec nat32;
  expBalances : Balance;
  notifications : vec Notification;
  twitter : text;
  lastSeenAt : Time;
  modifiedAt : Time;
  city : text;
  name : text;
  createdAt : Time;
  cover : text;
  markets : vec UserMarket;
  website : text;
  likes : vec nat32;
  picture : text;
  minusBalances : Balance;
  plusBalances : Balance;
  canister : text;
  number : nat32;
  replies : vec nat32;
  discord : text;
  handle : text;
  lockedBalances : Balance;
  comments : vec CommentStable;
  posts : vec nat32;
  followees : vec Followee;
  followers : vec Follower;
  notificationsSeen : nat;
  depositAddrs : DepositAddrs;
  balances : Balance;
  depositICPaddr : text;
};
type UserStable4 = record {
  id : text;
  age : nat;
  bio : text;
  txs : vec MarketTx;
  retweets : vec nat32;
  expBalances : Balance;
  notifications : vec Notification;
  twitter : text;
  lastSeenAt : Time;
  modifiedAt : Time;
  city : text;
  name : text;
  createdAt : Time;
  cover : text;
  markets : vec UserMarket;
  website : text;
  likes : vec nat32;
  picture : text;
  minusBalances : Balance;
  plusBalances : Balance;
  canister : text;
  number : nat32;
  replies : vec nat32;
  discord : text;
  handle : text;
  lockedBalances : Balance;
  comments : vec CommentStable;
  posts : vec nat32;
  followees : vec FolloweeStable;
  followers : vec FollowerStable;
  notificationsSeen : nat;
  depositAddrs : DepositAddrs;
  balances : Balance;
  depositICPaddr : text;
};
service : Actor